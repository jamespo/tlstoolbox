#!/bin/bash

FUNCTION=$1

function usage() {
    echo "USAGE: "
    echo "       tlstoolbox listsans      HOST [PORT]"
    echo "       tlstoolbox showchain     HOST [PORT]"
    echo "       tlstoolbox showcerts     HOST [PORT]"
    echo "       tlstoolbox viewcert      FILENAME"
    echo "       tlstoolbox viewcertexts  FILENAME"
}


function listsans() {
    # args: host port
    echo "SAN entries for $1:$2"
    openssl s_client -connect "$1":"$2" < /dev/null 2>/dev/null \
	| openssl x509 -noout -text 2>/dev/null \
	| perl -ne 'm/DNS/ && s/(, *|^ *DNS:)//g && print(join("\n",split /DNS:/))'
}

function showcerts() {
    # args: host port
    openssl s_client -showcerts -connect "$1":"$2" < /dev/null 2>&1
}

function showchain() {
    echo "Certificate Chain for $1:$2"
    showcerts "$1" "$2" | perl -ne '/^ (\d+ .+)$/ && print "$1\n"'
}

function viewcert() {
    openssl x509 -in "$1" -text -noout
}

function viewcertexts() {
    openssl x509 -in "$1" -text -noout \
	| perl -ne '/^            (X509.+):/ && print "- $1\n"'
}


function main() {
    kHOST_PORT_REGEX='^(listsans|showchain|showcerts)$'
    kCRTFILE_REGEX='^(viewcert)'
    if [[ "$FUNCTION" =~ $kHOST_PORT_REGEX ]]; then
	# removing leading https:// if present
	HOST="${2//https:\/\//}"
	echo "$HOST"
	# default to port 443 if no port supplied
	PORT="${3:-443}"
	"$FUNCTION" "$HOST" "$PORT"
    elif [[ "$FUNCTION" =~ $kCRTFILE_REGEX ]]; then
	FILE=$2
	"$FUNCTION" "$FILE"
    else
	usage
    fi
}

main "$@"
